// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: yolo_grpc.proto
#ifndef GRPC_yolo_5fgrpc_2eproto__INCLUDED
#define GRPC_yolo_5fgrpc_2eproto__INCLUDED

#include "yolo_grpc.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace yolo_grpc {

// STYolo - service for second and third yolo stages 
// in car number search cascade
class STYolo final {
 public:
  static constexpr char const* service_full_name() {
    return "yolo_grpc.STYolo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::yolo_grpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>> AsyncSendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>>(AsyncSendDetectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>> PrepareAsyncSendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>>(PrepareAsyncSendDetectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::yolo_grpc::Response, ::yolo_grpc::Config>> ConfigUpdater(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::yolo_grpc::Response, ::yolo_grpc::Config>>(ConfigUpdaterRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::yolo_grpc::Response, ::yolo_grpc::Config>> AsyncConfigUpdater(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::yolo_grpc::Response, ::yolo_grpc::Config>>(AsyncConfigUpdaterRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::yolo_grpc::Response, ::yolo_grpc::Config>> PrepareAsyncConfigUpdater(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::yolo_grpc::Response, ::yolo_grpc::Config>>(PrepareAsyncConfigUpdaterRaw(context, cq));
    }
    virtual ::grpc::Status SetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::yolo_grpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>> AsyncSetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>>(AsyncSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>> PrepareAsyncSetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>>(PrepareAsyncSetConfigRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo* request, ::yolo_grpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo* request, ::yolo_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo* request, ::yolo_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ConfigUpdater(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::yolo_grpc::Response,::yolo_grpc::Config>* reactor) = 0;
      #else
      virtual void ConfigUpdater(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::yolo_grpc::Response,::yolo_grpc::Config>* reactor) = 0;
      #endif
      virtual void SetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config* request, ::yolo_grpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config* request, ::yolo_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config* request, ::yolo_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>* AsyncSendDetectionRaw(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>* PrepareAsyncSendDetectionRaw(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::yolo_grpc::Response, ::yolo_grpc::Config>* ConfigUpdaterRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::yolo_grpc::Response, ::yolo_grpc::Config>* AsyncConfigUpdaterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::yolo_grpc::Response, ::yolo_grpc::Config>* PrepareAsyncConfigUpdaterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>* AsyncSetConfigRaw(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yolo_grpc::Response>* PrepareAsyncSetConfigRaw(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::yolo_grpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>> AsyncSendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>>(AsyncSendDetectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>> PrepareAsyncSendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>>(PrepareAsyncSendDetectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::yolo_grpc::Response, ::yolo_grpc::Config>> ConfigUpdater(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::yolo_grpc::Response, ::yolo_grpc::Config>>(ConfigUpdaterRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::yolo_grpc::Response, ::yolo_grpc::Config>> AsyncConfigUpdater(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::yolo_grpc::Response, ::yolo_grpc::Config>>(AsyncConfigUpdaterRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::yolo_grpc::Response, ::yolo_grpc::Config>> PrepareAsyncConfigUpdater(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::yolo_grpc::Response, ::yolo_grpc::Config>>(PrepareAsyncConfigUpdaterRaw(context, cq));
    }
    ::grpc::Status SetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::yolo_grpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>> AsyncSetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>>(AsyncSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>> PrepareAsyncSetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>>(PrepareAsyncSetConfigRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo* request, ::yolo_grpc::Response* response, std::function<void(::grpc::Status)>) override;
      void SendDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo* request, ::yolo_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendDetection(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo* request, ::yolo_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ConfigUpdater(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::yolo_grpc::Response,::yolo_grpc::Config>* reactor) override;
      #else
      void ConfigUpdater(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::yolo_grpc::Response,::yolo_grpc::Config>* reactor) override;
      #endif
      void SetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config* request, ::yolo_grpc::Response* response, std::function<void(::grpc::Status)>) override;
      void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config* request, ::yolo_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetConfig(::grpc::ClientContext* context, const ::yolo_grpc::Config* request, ::yolo_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yolo_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>* AsyncSendDetectionRaw(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>* PrepareAsyncSendDetectionRaw(::grpc::ClientContext* context, const ::yolo_grpc::CamInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::yolo_grpc::Response, ::yolo_grpc::Config>* ConfigUpdaterRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::yolo_grpc::Response, ::yolo_grpc::Config>* AsyncConfigUpdaterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::yolo_grpc::Response, ::yolo_grpc::Config>* PrepareAsyncConfigUpdaterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>* AsyncSetConfigRaw(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yolo_grpc::Response>* PrepareAsyncSetConfigRaw(::grpc::ClientContext* context, const ::yolo_grpc::Config& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendDetection_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfigUpdater_;
    const ::grpc::internal::RpcMethod rpcmethod_SetConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendDetection(::grpc::ServerContext* context, const ::yolo_grpc::CamInfo* request, ::yolo_grpc::Response* response);
    virtual ::grpc::Status ConfigUpdater(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::yolo_grpc::Config, ::yolo_grpc::Response>* stream);
    virtual ::grpc::Status SetConfig(::grpc::ServerContext* context, const ::yolo_grpc::Config* request, ::yolo_grpc::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendDetection() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDetection(::grpc::ServerContext* /*context*/, const ::yolo_grpc::CamInfo* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDetection(::grpc::ServerContext* context, ::yolo_grpc::CamInfo* request, ::grpc::ServerAsyncResponseWriter< ::yolo_grpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfigUpdater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConfigUpdater() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ConfigUpdater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigUpdater(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::yolo_grpc::Config, ::yolo_grpc::Response>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigUpdater(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::yolo_grpc::Config, ::yolo_grpc::Response>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::yolo_grpc::Config* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConfig(::grpc::ServerContext* context, ::yolo_grpc::Config* request, ::grpc::ServerAsyncResponseWriter< ::yolo_grpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendDetection<WithAsyncMethod_ConfigUpdater<WithAsyncMethod_SetConfig<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendDetection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::yolo_grpc::CamInfo, ::yolo_grpc::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::yolo_grpc::CamInfo* request, ::yolo_grpc::Response* response) { return this->SendDetection(context, request, response); }));}
    void SetMessageAllocatorFor_SendDetection(
        ::grpc::experimental::MessageAllocator< ::yolo_grpc::CamInfo, ::yolo_grpc::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::yolo_grpc::CamInfo, ::yolo_grpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDetection(::grpc::ServerContext* /*context*/, const ::yolo_grpc::CamInfo* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendDetection(
      ::grpc::CallbackServerContext* /*context*/, const ::yolo_grpc::CamInfo* /*request*/, ::yolo_grpc::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendDetection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::yolo_grpc::CamInfo* /*request*/, ::yolo_grpc::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ConfigUpdater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ConfigUpdater() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackBidiHandler< ::yolo_grpc::Response, ::yolo_grpc::Config>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->ConfigUpdater(context); }));
    }
    ~ExperimentalWithCallbackMethod_ConfigUpdater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigUpdater(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::yolo_grpc::Config, ::yolo_grpc::Response>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::yolo_grpc::Response, ::yolo_grpc::Config>* ConfigUpdater(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::yolo_grpc::Response, ::yolo_grpc::Config>* ConfigUpdater(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::yolo_grpc::Config, ::yolo_grpc::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::yolo_grpc::Config* request, ::yolo_grpc::Response* response) { return this->SetConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SetConfig(
        ::grpc::experimental::MessageAllocator< ::yolo_grpc::Config, ::yolo_grpc::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::yolo_grpc::Config, ::yolo_grpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::yolo_grpc::Config* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::yolo_grpc::Config* /*request*/, ::yolo_grpc::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::yolo_grpc::Config* /*request*/, ::yolo_grpc::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SendDetection<ExperimentalWithCallbackMethod_ConfigUpdater<ExperimentalWithCallbackMethod_SetConfig<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SendDetection<ExperimentalWithCallbackMethod_ConfigUpdater<ExperimentalWithCallbackMethod_SetConfig<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendDetection() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDetection(::grpc::ServerContext* /*context*/, const ::yolo_grpc::CamInfo* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfigUpdater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConfigUpdater() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ConfigUpdater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigUpdater(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::yolo_grpc::Config, ::yolo_grpc::Response>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::yolo_grpc::Config* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendDetection() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDetection(::grpc::ServerContext* /*context*/, const ::yolo_grpc::CamInfo* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDetection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfigUpdater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConfigUpdater() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ConfigUpdater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigUpdater(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::yolo_grpc::Config, ::yolo_grpc::Response>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigUpdater(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetConfig() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::yolo_grpc::Config* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendDetection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendDetection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDetection(::grpc::ServerContext* /*context*/, const ::yolo_grpc::CamInfo* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendDetection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendDetection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ConfigUpdater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ConfigUpdater() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->ConfigUpdater(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_ConfigUpdater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigUpdater(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::yolo_grpc::Config, ::yolo_grpc::Response>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ConfigUpdater(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ConfigUpdater(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::yolo_grpc::Config* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendDetection() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::yolo_grpc::CamInfo, ::yolo_grpc::Response>(std::bind(&WithStreamedUnaryMethod_SendDetection<BaseClass>::StreamedSendDetection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDetection(::grpc::ServerContext* /*context*/, const ::yolo_grpc::CamInfo* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDetection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::yolo_grpc::CamInfo,::yolo_grpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::yolo_grpc::Config, ::yolo_grpc::Response>(std::bind(&WithStreamedUnaryMethod_SetConfig<BaseClass>::StreamedSetConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::yolo_grpc::Config* /*request*/, ::yolo_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::yolo_grpc::Config,::yolo_grpc::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendDetection<WithStreamedUnaryMethod_SetConfig<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendDetection<WithStreamedUnaryMethod_SetConfig<Service > > StreamedService;
};

}  // namespace yolo_grpc


#endif  // GRPC_yolo_5fgrpc_2eproto__INCLUDED
